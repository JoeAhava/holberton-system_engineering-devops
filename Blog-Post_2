Define hard links and symbolic links
A hard link is another name for an existing file on Linux or a Unix like operating system.
“Perhaps the most useful application for hard links is to allow files, programs, and scripts (i.e. short programs) to be easily accessed in a different directory from the original file or executable file (i.e., the ready-to-run version of a program). Typing the name of the hard link will cause the program or script to be executed in the same way as using its original name.” https://medium.com/p/what-is-the-difference-between-a-hard-link-and-a-symbolic-link-8c0493041b62

Notice, that the hlink1 (hard link) and the cookies.c file have the same inode (number). “An inode is a data structure on a traditional Unix-style file system such as UFS or ext3. An inode stores basic information about a regular file, directory, or other file system object.” https://www.cyberciti.biz/tips/understanding-unixlinux-filesystem-inodes.html

A symbolic link is an actual link to the original file. A short cut to that file.
Symbolic links don’t contain data in the file. They serve to link directories or to files especially if the computer is remote. However, when you delete the file used to link the symbolic link to each other, the link will become unusable. Hard links on the other hand, will store the contents of the file even if the target file was deleted. On the command line, this is how you create a symbolic link:
